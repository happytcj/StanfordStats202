Obs
Obs <- seq(1,6,length=6)
X1 <- c(0,2,0,0,-1,1)
X2 <- c(3,0,1,1,0,1)
X3 <- c(0,0,3,2,1,1)
Y <- c('Red', 'Red', 'Red', 'Green', 'Green', 'Red')
df <- data.frame(Obs, X1, X2, X3, Y)
str(df)
Obs <- seq(1,6,length=6)
X1 <- c(0,2,0,0,-1,1)
X2 <- c(3,0,1,1,0,1)
X3 <- c(0,0,3,2,1,1)
Y <- c('Red', 'Red', 'Red', 'Green', 'Green', 'Red')
df <- data.frame(Obs, X1, X2, X3, Y)
shape(df)
Obs <- seq(1,6,length=6)
X1 <- c(0,2,0,0,-1,1)
X2 <- c(3,0,1,1,0,1)
X3 <- c(0,0,3,2,1,1)
Y <- c('Red', 'Red', 'Red', 'Green', 'Green', 'Red')
df <- data.frame(Obs, X1, X2, X3, Y)
dim(df)
Obs <- seq(1,6,length=6)
X1 <- c(0,2,0,0,-1,1)
X2 <- c(3,0,1,1,0,1)
X3 <- c(0,0,3,2,1,1)
Y <- c('Red', 'Red', 'Red', 'Green', 'Green', 'Red')
df <- data.frame(Obs, X1, X2, X3, Y)
dim(df)
Obs <- seq(1,6,length=6)
X1 <- c(0,2,0,0,-1,1)
X2 <- c(3,0,1,1,0,1)
X3 <- c(0,0,3,2,1,1)
Y <- c('Red', 'Red', 'Red', 'Green', 'Green', 'Red')
df <- data.frame(Obs, X1, X2, X3, Y)
dim(df)
Obs <- seq(1,6,length=6)
X1 <- c(0,2,0,0,-1,1)
X2 <- c(3,0,1,1,0,1)
X3 <- c(0,0,3,2,1,1)
Y <- c('Red', 'Red', 'Red', 'Green', 'Green', 'Red')
df <- data.frame(Obs, X1, X2, X3, Y)
df
Obs <- seq(1,6,length=6)
X1 <- c(0,2,0,0,-1,1)
X2 <- c(3,0,1,1,0,1)
X3 <- c(0,0,3,2,1,1)
Y <- c('Red', 'Red', 'Red', 'Green', 'Green', 'Red')
df <- data.frame(Obs, X1, X2, X3, Y)
disc(df)
Obs <- seq(1,6,length=6)
X1 <- c(0,2,0,0,-1,1)
X2 <- c(3,0,1,1,0,1)
X3 <- c(0,0,3,2,1,1)
Y <- c('Red', 'Red', 'Red', 'Green', 'Green', 'Red')
df <- data.frame(Obs, X1, X2, X3, Y)
desc(df)
Obs <- seq(1,6,length=6)
X1 <- c(0,2,0,0,-1,1)
X2 <- c(3,0,1,1,0,1)
X3 <- c(0,0,3,2,1,1)
Y <- c('Red', 'Red', 'Red', 'Green', 'Green', 'Red')
df <- data.frame(Obs, X1, X2, X3, Y)
summary(df)
Obs <- seq(1,6,length=6)
X1 <- c(0,2,0,0,-1,1)
X2 <- c(3,0,1,1,0,1)
X3 <- c(0,0,3,2,1,1)
Y <- c('Red', 'Red', 'Red', 'Green', 'Green', 'Red')
df <- data.frame(Obs, X1, X2, X3, Y)
(df)
Obs <- seq(1,6,length=6)
X1 <- c(0,2,0,0,-1,1)
X2 <- c(3,0,1,1,0,1)
X3 <- c(0,0,3,2,1,1)
Y <- c('Red', 'Red', 'Red', 'Green', 'Green', 'Red')
df <- data.frame(Obs, X1, X2, X3, Y)
(df)
df$new = Obs
Obs <- seq(1,6,length=6)
X1 <- c(0,2,0,0,-1,1)
X2 <- c(3,0,1,1,0,1)
X3 <- c(0,0,3,2,1,1)
Y <- c('Red', 'Red', 'Red', 'Green', 'Green', 'Red')
df <- data.frame(Obs, X1, X2, X3, Y)
df$new = Obs
(df)
Obs <- seq(1,6,length=6)
X1 <- c(0,2,0,0,-1,1)
X2 <- c(3,0,1,1,0,1)
X3 <- c(0,0,3,2,1,1)
Y <- c('Red', 'Red', 'Red', 'Green', 'Green', 'Red')
df <- data.frame(Obs, X1, X2, X3, Y)
(df)
# df$dist <- dist(rbind(x1, x2))
coords_df <- df[2:4]
coords_df
# df$dist <- dist(rbind(x1, x2))
x = 1
# df$dist <- dist(rbind(x1, x2))
x = 1
x
# df$dist <- dist(rbind(x1, x2))
dist <- apply(coords_df, 2, dist,c(0,0,0))
# df$dist <- dist(rbind(x1, x2))
zero_mat <- matrix(NA, nrow = 6, ncol = 5)
dist <- apply(coords_df, 2, dist,zero_mat)
# df$dist <- dist(rbind(x1, x2))
zero_mat <- matrix(NA, nrow = 6, ncol = 5)
tmp <- dist(rbind(zero_mat, coords_df))
coords_df <- df[2:4]
coords_df
sum(coords_df)
coords_df <- df[2:4]
coords_df
str(coords_df)
coords_df <- matrix(df[2:4])
coords_df
str(coords_df)
coords_mat <- matrix(df[2:4])
coords_df
str(coords_df)
coords_mat <- matrix(df[2:4])
coords_mat
str(coords_df)
coords_mat <- matrix(df[2:4])
coords_mat
coords_mat <- matrix(df[2:4])
str(coords_mat)
coords_mat <- matrix(df[2:4])
dim(coords_mat)
coords_df <- df[2:4]
coords_df
coords_mat <- data.matrix(df[2:4])
coords_mat <- data.matrix(df[2:4])
coords_mat
coords_mat <- data.matrix(df[2:4])
dims(coords_mat)
coords_mat <- data.matrix(df[2:4])
dim(coords_mat)
coords_mat <- data.matrix(df[2:4])
coords_mat
# df$dist <- dist(rbind(x1, x2))
zero_mat <- matrix(NA, nrow = 6, ncol = 5)
tmp <- dist(rbind(zero_mat, coords_mat))
# df$dist <- dist(rbind(x1, x2))
zero_mat <- matrix(NA, nrow = 6, ncol = 3)
tmp <- dist(rbind(zero_mat, coords_mat))
# dist <- apply(coords_df, 2, dist, zero_mat)
# df$dist <- dist(rbind(x1, x2))
zero_mat <- matrix(NA, nrow = 6, ncol = 3)
tmp <- dist(rbind(zero_mat, coords_mat))
tmp
# dist <- apply(coords_df, 2, dist, zero_mat)
# df$dist <- dist(rbind(x1, x2))
zero_mat <- matrix(NA, nrow = 6, ncol = 3)
tmp <- dist(zero_mat, coords_mat)
# df$dist <- dist(rbind(x1, x2))
zero_mat <- matrix(NA, nrow = 6, ncol = 3)
tmp <- dist(zero_mat, coords_mat)
# df$dist <- dist(rbind(x1, x2))
zero_mat <- matrix(NA, nrow = 6, ncol = 3)
tmp <- dist(zero_mat, coords_mat)
# df$dist <- dist(rbind(x1, x2))
zero_mat <- matrix(NA, nrow = 6, ncol = 3)
tmp <- dist(rbind(zero_mat, coords_mat))
# dist <- apply(coords_df, 2, dist, zero_mat)
# df$dist <- dist(rbind(x1, x2))
zero_mat <- matrix(NA, nrow = 6, ncol = 3)
# tmp <- dist(rbind(zero_mat, coords_mat))
dist <- apply(coords_mat, 2, dist, zero_mat)
rdist(c(0,0,0), c(1,1,1))
# rdist(c(0,0,0), c(1,1,1))
install.packages("ggplot2")
# rdist(c(0,0,0), c(1,1,1))
install.packages("fields")
# rdist(c(0,0,0), c(1,1,1))
install.packages("fields")
# rdist(c(0,0,0), c(1,1,1))
install.packages("fields")
rdist(c(0,0,0), c(1,1,1))
rdist(c(0,0,0), c(1,1,1))
rdist(c(0,0,0), c(1,1,1))
rdist(c(0,0,0), c(1,1,1))
rdist(c(0,0,0), c(1,1,1))
fields.rdist(c(0,0,0), c(1,1,1))
fields.rdist(c(0,0,0), c(1,1,1))
# rdist(c(0,0,0), c(1,1,1))
install.packages("fields")
# rdist(c(0,0,0), c(1,1,1))
library(fields)
# rdist(c(0,0,0), c(1,1,1))
library(fields)
# rdist(c(0,0,0), c(1,1,1))
library(fields)
library(fields)
rdist(c(0,0,0), c(1,1,1))
# df$dist <- dist(rbind(x1, x2))
zero_mat <- matrix(NA, nrow = 6, ncol = 3)
# tmp <- dist(rbind(zero_mat, coords_mat))
dist <- apply(coords_mat, 2, rdist, zero_mat)
# df$dist <- dist(rbind(x1, x2))
zero_mat <- matrix(NA, nrow = 6, ncol = 3)
# tmp <- dist(rbind(zero_mat, coords_mat))
dist <- apply(coords_mat, 2, rdist, zero_mat)
dist
# df$dist <- dist(rbind(x1, x2))
zero_mat <- matrix(NA, nrow = 6, ncol = 3)
# tmp <- dist(rbind(zero_mat, coords_mat))
dist <- apply(coords_mat, 2, rdist, zero_mat)
library(fields)
dist(c(0,0,0), c(1,1,1))
tmp <- cbind(c(0,0,0))
tmp <- cbind(c(0,0,0))
tmp
tmp <- rbind(c(0,0,0))
tmp
tmp <- cbind(c(0,0,0))
library(fields)
dist(cbind(c(0,0,0)), cbind(c(1,1,1)))
library(fields)
library("SpatialTools")
library(fields)
dist(cbind(c(0,0,0)), cbind(c(1,1,1)))
library(fields)
# dist(cbind(c(0,0,0)), cbind(c(1,1,1)))
install.packages SpatialTools
library(fields)
# dist(cbind(c(0,0,0)), cbind(c(1,1,1)))
install.packages('SpatialTools')
library(fields)
# dist(cbind(c(0,0,0)), cbind(c(1,1,1)))
library(SpatialTools)
library(fields)
library(fields)
library(SpatialTools)
# dist(cbind(c(0,0,0)), cbind(c(1,1,1)))
dist2(c(0,0,0), c(0,0,1))
library(fields)
library(SpatialTools)
# dist(cbind(c(0,0,0)), cbind(c(1,1,1)))
dist2(matrix(c(0,0,0)), matrix(c(0,0,1)))
library(fields)
library(SpatialTools)
# dist(cbind(c(0,0,0)), cbind(c(1,1,1)))
dist(cbind(c(0,0,0), c(0,0,1)))
library(fields)
library(SpatialTools)
# dist(cbind(c(0,0,0)), cbind(c(1,1,1)))
dist(rbind(c(0,0,0), c(0,0,1)))
library(fields)
library(SpatialTools)
# dist(cbind(c(0,0,0)), cbind(c(1,1,1)))
dist(rbind(c(0,0,0), c(0,0,2)))
library(fields)
library(SpatialTools)
# dist(cbind(c(0,0,0)), cbind(c(1,1,1)))
dist(rbind(c(0,0,0), c(0,0,0)))
library(fields)
library(SpatialTools)
# dist(cbind(c(0,0,0)), cbind(c(1,1,1)))
dist(rbind(c(0,1,3), c(0,0,0)))
dist <- NULL
for(i in 1:nrow(coords_mat) dist[i] <- dist(rbind(coords_mat[i], c(0,0,0)))
dist <- NULL
for(i in 1:nrow(coords_mat) dist[i] <- dist(rbind(coords_mat[i], c(0,0,0))
dist <- NULL
for(i in 1:nrow(coords_mat) dist[i] <- dist(rbind(coords_mat[i], c(0,0,0))
dist <- NULL
for(i in 1:nrow(coords_mat))
dist[i] <- dist(rbind(coords_mat[i], c(0,0,0)))
dist
dist <- NULL
for(i in 1:nrow(coords_mat))
dist[i] <- dist(rbind(coords_mat[i], c(0,0,0)))
coords_mat[i]
dist
dist <- NULL
for(i in 1:nrow(coords_mat))
dist[i] <- dist(rbind(coords_mat[i], c(0,0,0)))
coords_mat[i]
dist
dist <- NULL
for(i in 1:nrow(coords_mat))
dist[i] <- dist(rbind(coords_mat[i], c(0,0,0)))
coords_mat[i]
dist
dist <- NULL
for(i in 1:nrow(coords_mat))
dist[i] <- dist(rbind(coords_mat[i], c(0,0,0)))
coords_mat[i]
dist
dist <- NULL
for(i in 1:nrow(coords_mat)) {
dist[i] <- dist(rbind(coords_mat[i], c(0,0,0)))
coords_mat[i]
}
dist
dist <- NULL
for(i in 1:nrow(coords_mat)) {
dist[i] <- dist(rbind(coords_mat[i], c(0,0,0)))
coords_mat[i,]
}
dist
dist <- NULL
for(i in 1:nrow(coords_mat)) {
dist[i] <- dist(rbind(coords_mat[i], c(0,0,0)))
coords_mat[i,]
}
dist
dist <- NULL
for(i in 1:nrow(coords_mat)) {
dist[i] <- dist(rbind(coords_mat[i], c(0,0,0)))
coords_mat[i,]
}
dist
dist <- NULL
for(i in 1:nrow(coords_mat)) {
dist[i] <- dist(rbind(coords_mat[i], c(0,0,0)))
coords_mat[i,]
}
dist
dist <- NULL
for(i in 1:nrow(coords_mat)) {
dist[i] <- dist(rbind(coords_mat[i], c(0,0,0)))
str(coords_mat[i,])
}
dist
dist <- NULL
for(i in 1:nrow(coords_mat)) {
dist[i] <- dist(rbind(coords_mat[i,], c(0,0,0)))
}
dist
dist <- NULL
for(i in 1:nrow(coords_mat)) {
dist[i] <- dist(rbind(coords_mat[i,], c(0,0,0)))
}
plot(cars)
tmp <- 1+1
Obs <- seq(1,6,length=6)
X1 <- c(0,2,0,0,-1,1)
X2 <- c(3,0,1,1,0,1)
X3 <- c(0,0,3,2,1,1)
Y <- c('Red', 'Red', 'Red', 'Green', 'Green', 'Red')
df <- data.frame(Obs, X1, X2, X3, Y)
(df)
# df$dist <- dist(rbind(x1, x2))
zero_mat <- matrix(NA, nrow = 6, ncol = 3)
# tmp <- dist(rbind(zero_mat, coords_mat))
dist <- apply(coords_mat, 2, dist, zero_mat)
coords_mat <- data.matrix(df[2:4])
coords_mat
# df$dist <- dist(rbind(x1, x2))
zero_mat <- matrix(NA, nrow = 6, ncol = 3)
# tmp <- dist(rbind(zero_mat, coords_mat))
dist <- apply(coords_mat, 2, dist, zero_mat)
coords_mat <- data.matrix(df[2:4])
coords_mat
library(fields)
library(SpatialTools)
# dist(cbind(c(0,0,0)), cbind(c(1,1,1)))
dist(rbind(c(0,1,3), c(0,0,0)))
# df$dist <- dist(rbind(x1, x2))
zero_mat <- matrix(NA, nrow = 6, ncol = 3)
# tmp <- dist(rbind(zero_mat, coords_mat))
dist <- apply(coords_mat, 2, dist, zero_mat)
dist <- NULL
for(i in 1:nrow(coords_mat)) {
dist[i] <- dist(rbind(coords_mat[i,], c(0,0,0)))
}
dist
library(fields)
library(SpatialTools)
# dist(cbind(c(0,0,0)), cbind(c(1,1,1)))
dist(rbind(c(0,1,3), c(0,0,0)))
dist <- NULL
for(i in 1:nrow(coords_mat)) {
dist[i] <- dist(rbind(coords_mat[i,], c(0,0,0)))
}
df$dist <- dist
df
library(ISLR)
library(car)
library(boot)
library(MASS)
names(Weekly)
dim(Weekly)
summary(Weekly)
scatterplotMatrix(Weekly, main="Weekly Dataset Scatterplot Matrix")
Weekly_numeric <- Weekly[, sapply(Weekly, is.numeric)]
cor(Weekly_numeric)
m1<-lm(Year~Volume, data=Weekly)
summary(m1)
glm.fit <- glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume , data=Weekly ,family=binomial)
summary(glm.fit)
glm.probs <- predict(glm.fit, type="response")
contrasts(Weekly$Direction)
glm.pred=rep("Down", 1089)
glm.pred[glm.probs > 0.5] = "Up"
table(glm.pred, Weekly$Direction)
mean(glm.pred == Weekly$Direction)
train <- (Weekly$Year < 2008)
Weekly.2008 <- Weekly[!train,]
dim(Weekly.2008)
Direction.2008 <- Weekly$Direction[!train]
glm.fit <- glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Weekly ,family=binomial,subset=train)
glm.probs <- predict(glm.fit, Weekly.2008, type="response")
glm.pred=rep("Down",156)
glm.pred[glm.probs > 0.5] = "Up"
table(glm.pred, Direction.2008)
train_err <- mean(glm.pred==Direction.2008)
test_err <- 1-train_err
sprintf('training error: %0.4f', train_err)
sprintf('test error: %0.4f', test_err)
set.seed(1) # seed interpretor's RNG for reproducibility of results
glm.fit <- glm(default~income+balance, data=Default, family=binomial)
summary(glm.fit)
# i. split data into training and validation set
train <- sample(dim(Default)[1], dim(Default)[1]/2)
# ii fit multiple logistic regression with only training set
glm.fit <- glm(default~income+balance, data=Default, family=binomial, subset=train)
# iii obtain prediction of default status
glm.probs <- predict(glm.fit, newdata=Default[-train, ], type="response")
glm.pred <- rep("No", length(glm.probs))
glm.pred[glm.probs > 0.5] <- "Yes"
# iv
sprintf("test error rate with validation set approach is %0.3f%%",
100*mean(glm.pred != Default[-train,]$default))
for(i in 1:3) {
train <- sample(dim(Default)[1], dim(Default)[1]/2)
glm.fit <- glm(default~income+balance, data=Default, family=binomial, subset=train)
glm.probs <- predict(glm.fit, newdata=Default[-train, ], type="response")
glm.pred <- rep("No", length(glm.probs))
glm.pred[glm.probs > 0.5] <- "Yes"
tmpstr <- sprintf("run %d, test error rate with validation set approach is %0.3f%%", i
, 100*mean(glm.pred != Default[-train,]$default))
print(tmpstr)
}
train <- sample(dim(Default)[1], dim(Default)[1]/2)
glm.fit <- glm(default~student+income+balance, data=Default, family=binomial, subset=train)
glm.probs <- predict(glm.fit, newdata=Default[-train, ], type="response")
glm.pred <- rep("No", length(glm.probs))
glm.pred[glm.probs > 0.5] <- "Yes"
tmpstr <- sprintf("test error rate with dummy student variable is %0.3f%%", i,
100*mean(glm.pred != Default[-train,]$default))
print(tmpstr)
set.seed(1) # seed interpretor's RNG for reproducibility of results
glm.fit <- glm(default~income+balance, data=Default, family=binomial)
summary(glm.fit)
boot.fn <- function(data,index) {
return(coef(glm(default~income+balance,data=data,family="binomial",subset=index)))
}
boot(Default, boot.fn, 1000)
set.seed(1)
y <- rnorm(100)
x <- rnorm(100)
y <- x - 2*x^2 + rnorm(100)
plot(x, y)
set.seed(1)
Data <- data.frame(x, y)
# i.
glm.fit.1 <- glm(y ~ x)
cv.glm(Data, glm.fit.1)$delta[1]
# ii.
glm.fit.2 = glm(y ~ poly(x, 2))
cv.glm(Data, glm.fit.2)$delta[1]
# iii.
glm.fit.3 = glm(y ~ poly(x, 3))
cv.glm(Data, glm.fit.3)$delta[1]
# iv.
glm.fit.4 = glm(y ~ poly(x, 4))
cv.glm(Data, glm.fit.4)$delta[1]
set.seed(2)
Data <- data.frame(x, y)
glm.fit.1 <- glm(y ~ x)
cv.glm(Data, glm.fit.1)$delta[1]
glm.fit.2 = glm(y ~ poly(x, 2))
cv.glm(Data, glm.fit.2)$delta[1]
glm.fit.3 = glm(y ~ poly(x, 3))
cv.glm(Data, glm.fit.3)$delta[1]
glm.fit.4 = glm(y ~ poly(x, 4))
cv.glm(Data, glm.fit.4)$delta[1]
summary(glm.fit.4)
sample_u <- mean(Boston$medv)
sample_u
sample_sde <- sd(Boston$medv) / sqrt(dim(Boston)[1])
sample_sde
set.seed(1)
boot.fn <- function(data, idx) {
ret <- mean(data[idx])
return (ret)
}
boot(Boston$medv, boot.fn, 1000)
l = sample_u - 2*sample_sde
u = sample_u + 2*sample_sde
l
u
t.test(Boston$medv)
med <- median(Boston$medv)
med
boot.fn <- function(data, idx) {
ret = median(data[idx])
return (ret)
}
boot(Boston$medv, boot.fn, 1000)
mu_hat_0.1 <- quantile(Boston$medv, 0.1)
mu_hat_0.1
boot.fn <- function(data, idx){
ret = quantile(data[idx], c(0.1))
return (ret)
}
boot(Boston$medv, boot.fn, 1000)
